---
# CA1 AWS Infrastructure Automation Playbook
# This playbook provisions VPC, subnets, gateways, security groups, EC2 instances, and Elastic IPs
# Adapt values from your CA0 README and vm-configurations files

- name: Provision AWS IoT Pipeline Infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: us-east-2
    vpc_cidr: "10.0.0.0/16"           # From CA0 README
    public_subnet_cidr: "10.0.0.0/20" # From CA0 README
    private_subnet_cidr: "10.0.128.0/20" # From CA0 README
    instance_type: t2.micro
    key_name: plant-monitoring-key      # From CA0 README
    ami: ami-0cfde0ea8edd312d4          # Ubuntu 24.04 LTS AMI for us-east-2 (lookup in AWS Console)

  tasks:
    - name: Create or get VPC
      amazon.aws.ec2_vpc_net:
        name: plant-monitoring-vpc
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-vpc
        state: present
      register: vpc

    - name: Create or get public subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ public_subnet_cidr }}"
        map_public: yes
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-public-subnet
        state: present
      register: public_subnet

    - name: Create or get private subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ private_subnet_cidr }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-private-subnet
        state: present
      register: private_subnet

    - name: Create or get Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-igw
        state: present
      register: igw

    - name: Find existing unassociated EIP for NAT Gateway
      amazon.aws.ec2_eip_info:
        region: "{{ region }}"
      register: eip_info

    - name: Set NAT EIP allocation_id from existing EIP if available
      set_fact:
        nat_eip_allocation_id: "{{ item.allocation_id }}"
      when: item.tags.Name is defined and item.tags.Name == 'plant-monitoring-nat-eip' and item.instance_id is not defined and item.association_id is not defined
      loop: "{{ eip_info.addresses }}"
      loop_control:
        label: "{{ item.public_ip }}"
      register: found_nat_eip

    - name: Allocate new Elastic IP for NAT Gateway if none available
      amazon.aws.ec2_eip:
        in_vpc: true
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-nat-eip
        state: present
      register: nat_eip
      when: found_nat_eip.results | selectattr('skipped', 'equalto', False) | list | length == 0

    - name: Set NAT EIP allocation_id from newly created EIP
      set_fact:
        nat_eip_allocation_id: "{{ nat_eip.allocation_id }}"
      when: found_nat_eip.results | selectattr('skipped', 'equalto', False) | list | length == 0

    - name: Set NAT EIP allocation_id from found EIP
      set_fact:
        nat_eip_allocation_id: "{{ found_nat_eip.results[0].ansible_facts.nat_eip_allocation_id }}"
      when: found_nat_eip.results | selectattr('skipped', 'equalto', False) | list | length > 0

    - name: Find existing NAT Gateway in public subnet
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ region }}"
        filters:
          subnet-id: "{{ public_subnet.subnet.id }}"
      register: nat_gw_info

    - name: Set NAT Gateway ID from existing if available
      set_fact:
        nat_gw_id: "{{ item.nat_gateway_id }}"
      when: item.state == 'available' and item.tags.Name is defined and item.tags.Name == 'plant-monitoring-nat-gw'
      loop: "{{ nat_gw_info.nat_gateways }}"
      loop_control:
        label: "{{ item.nat_gateway_id }}"
      register: found_nat_gw

    - name: Create NAT Gateway if none exists
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet.subnet.id }}"
        allocation_id: "{{ nat_eip_allocation_id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-nat-gw
        state: present
      register: nat_gw
      when: found_nat_gw.results | selectattr('skipped', 'equalto', False) | list | length == 0 and nat_eip_allocation_id is defined

    - name: Set NAT Gateway ID from newly created NAT Gateway
      set_fact:
        nat_gw_id: "{{ nat_gw.nat_gateway_id }}"
      when: found_nat_gw.results | selectattr('skipped', 'equalto', False) | list | length == 0 and nat_gw is defined

    - name: Set NAT Gateway ID from found NAT Gateway
      set_fact:
        nat_gw_id: "{{ found_nat_gw.results[0].ansible_facts.nat_gw_id }}"
      when: found_nat_gw.results | selectattr('skipped', 'equalto', False) | list | length > 0

    - name: Create or get public route table (with IGW route)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-public-rt
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        state: present
      register: public_rt

    - name: Create or get private route table (with NAT Gateway route)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-private-rt
        routes:
          - dest: "0.0.0.0/0"
            nat_gateway_id: "{{ nat_gw.nat_gateway_id }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        state: present
      register: private_rt
      when: nat_gw is defined and nat_gw.nat_gateway_id is defined
    # Phase 1: Create all security groups with only CIDR-based rules
    - name: Create or get security group for Kafka
      amazon.aws.ec2_security_group:
        name: SG-Kafka
        description: Kafka security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-sg-kafka
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9092
            to_port: 9092
            cidr_ip: 10.0.0.0/16
        state: present
      register: sg_kafka

    - name: Create or get security group for MongoDB (CIDR only)
      amazon.aws.ec2_security_group:
        name: SG-MongoDB
        description: MongoDB security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-sg-mongodb
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_mongodb

    - name: Create or get security group for Processor (CIDR only)
      amazon.aws.ec2_security_group:
        name: SG-Processor
        description: Processor security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-sg-processor
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_processor

    - name: Create or get security group for Home Assistant (CIDR only)
      amazon.aws.ec2_security_group:
        name: SG-HomeAssistant
        description: Home Assistant security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: plant-monitoring-sg-homeassistant
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8123
            to_port: 8123
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_homeassistant

    # Phase 2: Add group-pair rules after all SGs exist
    - name: Add group-pair rules to MongoDB SG
      amazon.aws.ec2_security_group:
        name: SG-MongoDB
        description: MongoDB security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 27017
            to_port: 27017
            group_id: "{{ sg_processor.group_id }}"
        state: present
      when: sg_processor is defined

    - name: Add group-pair rules to Processor SG
      amazon.aws.ec2_security_group:
        name: SG-Processor
        description: Processor security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            group_id: "{{ sg_homeassistant.group_id }}"
          - proto: tcp
            from_port: 9092
            to_port: 9092
            group_id: "{{ sg_kafka.group_id }}"
          - proto: tcp
            from_port: 27017
            to_port: 27017
            group_id: "{{ sg_mongodb.group_id }}"
          - proto: tcp
            from_port: 1883
            to_port: 1883
            group_id: "{{ sg_homeassistant.group_id }}"
        state: present
      when: sg_kafka is defined and sg_mongodb is defined and sg_homeassistant is defined

    - name: Add group-pair rules to Home Assistant SG
      amazon.aws.ec2_security_group:
        name: SG-HomeAssistant
        description: Home Assistant security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8123
            to_port: 8123
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 1883
            to_port: 1883
            group_pairs:
              - group_id: "{{ sg_processor.group_id }}"
        state: present
      when: sg_processor is defined

    # Launch EC2 instances for all VMs
    - name: Launch or get EC2 instance for Kafka (VM-1)
      amazon.aws.ec2_instance:
        name: VM-1-Kafka
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ private_subnet.subnet.id }}"
        security_group: "{{ sg_kafka.group_id }}"
        region: "{{ region }}"
        wait: yes
        tags:
          Name: plant-monitoring-vm-1-kafka
        state: present
      register: kafka_instance

    - name: Launch or get EC2 instance for MongoDB (VM-2)
      amazon.aws.ec2_instance:
        name: VM-2-MongoDB
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ private_subnet.subnet.id }}"
        security_group: "{{ sg_mongodb.group_id }}"
        region: "{{ region }}"
        wait: yes
        tags:
          Name: plant-monitoring-vm-2-mongodb
        state: present
      register: mongodb_instance

    - name: Launch or get EC2 instance for Processor (VM-3)
      amazon.aws.ec2_instance:
        name: VM-3-Processor
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ private_subnet.subnet.id }}"
        security_group: "{{ sg_processor.group_id }}"
        region: "{{ region }}"
        wait: yes
        tags:
          Name: plant-monitoring-vm-3-processor
        state: present
      register: processor_instance

    - name: Launch or get EC2 instance for Home Assistant (VM-4)
      amazon.aws.ec2_instance:
        name: VM-4-HomeAssistant
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ public_subnet.subnet.id }}"
        security_group: "{{ sg_homeassistant.group_id }}"
        region: "{{ region }}"
        wait: yes
        tags:
          Name: plant-monitoring-vm-4-homeassistant
        state: present
      register: ha_instance

    - name: Allocate or get Elastic IP for Home Assistant (VM-4)
      amazon.aws.ec2_eip:
        in_vpc: true
        region: "{{ region }}"
        instance_id: "{{ ha_instance.instance_ids[0] }}"
        tags:
          Name: plant-monitoring-ha-eip
        state: present
      register: ha_eip

    # Output instance details for later configuration
    - name: Show instance details
      debug:
        msg:
          - "Kafka: {{ kafka_instance.instances[0].private_ip_address }}"
          - "MongoDB: {{ mongodb_instance.instances[0].private_ip_address }}"
          - "Processor: {{ processor_instance.instances[0].private_ip_address }}"
          - "Home Assistant: {{ ha_instance.instances[0].private_ip_address }} (Elastic IP: {{ ha_eip.eip }})"
