# CA1 AWS Infrastructure Teardown Playbook
# This playbook destroys all AWS resources created by aws_infra.yml
---
- name: Teardown AWS IoT Pipeline Infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: us-east-2
    vpc_cidr: "10.0.0.0/16"
    public_subnet_cidr: "10.0.0.0/20"
    private_subnet_cidr: "10.0.128.0/20"
    key_name: plant-monitoring-key
    ami: ami-0cfde0ea8edd312d4

  tasks:
    # Lookup VPC by CIDR (for use in lookups below)
    - name: Lookup VPC by CIDR
      amazon.aws.ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          cidr: "{{ vpc_cidr }}"
      register: vpc_info


    # Set vpc_id fact for reuse
    - name: Set vpc_id fact
      set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
      when: vpc_info.vpcs is defined and vpc_info.vpcs|length > 0

    # Lookup all EC2 instances in VPC
    - name: Lookup all EC2 instances in VPC
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_ec2_info
      when: vpc_id is defined

    - name: Terminate all EC2 instances in VPC
      amazon.aws.ec2_instance:
        instance_ids: "{{ item.instance_id }}"
        state: absent
        region: "{{ region }}"
        wait: yes
      loop: "{{ vpc_ec2_info.instances }}"
      when: vpc_id is defined and vpc_ec2_info.instances is defined and vpc_ec2_info.instances|length > 0

    # Lookup all NAT Gateways in VPC
    - name: Lookup all NAT Gateways in VPC
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_nat_gw_info
      when: vpc_id is defined


    - name: Delete all NAT Gateways in VPC
      amazon.aws.ec2_vpc_nat_gateway:
        nat_gateway_id: "{{ item.nat_gateway_id }}"
        state: absent
        region: "{{ region }}"
      loop: "{{ vpc_nat_gw_info.nat_gateways }}"
      when: vpc_id is defined and vpc_nat_gw_info.nat_gateways is defined and vpc_nat_gw_info.nat_gateways|length > 0

    - name: Wait for NAT Gateways to be deleted
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: natgw_wait_info
      until: natgw_wait_info.nat_gateways | selectattr('state', 'equalto', 'deleted') | list | length == (vpc_nat_gw_info.nat_gateways | length)
      retries: 30
      delay: 10
      when: vpc_id is defined and vpc_nat_gw_info.nat_gateways is defined and vpc_nat_gw_info.nat_gateways|length > 0

    # Lookup all Elastic IPs in region
    - name: Lookup all Elastic IPs
      amazon.aws.ec2_eip_info:
        region: "{{ region }}"
      register: all_eips

    - name: Release all unassociated Elastic IPs
      amazon.aws.ec2_eip:
        public_ip: "{{ item.public_ip }}"
        state: absent
        region: "{{ region }}"
      loop: "{{ all_eips.addresses }}"
      when: item.domain == 'vpc' and (item.instance_id is not defined or not item.instance_id) and (item.association_id is not defined or not item.association_id)

    # Lookup NAT Gateway ID
    - name: Lookup NAT Gateway in public subnet
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ region }}"
        filters:
          subnet-id: "{{ public_subnet_id | default(omit) }}"
      register: nat_gw_info

    - name: Delete NAT Gateway
      amazon.aws.ec2_vpc_nat_gateway:
        nat_gateway_id: "{{ nat_gw_info.nat_gateways[0].nat_gateway_id }}"
        state: absent
        region: "{{ region }}"
      when: nat_gw_info.nat_gateways is defined and nat_gw_info.nat_gateways|length > 0

    # Lookup VPC by CIDR
    - name: Lookup VPC by CIDR
      amazon.aws.ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          cidr: "{{ vpc_cidr }}"
      register: vpc_info

    # Lookup Internet Gateway attached to VPC
    - name: Lookup Internet Gateway attached to VPC
      amazon.aws.ec2_vpc_igw_info:
        region: "{{ region }}"
        filters:
          attachment.vpc-id: "{{ vpc_id }}"
      register: igw_info
      when: vpc_id is defined

    - name: Detach Internet Gateway from VPC
      amazon.aws.ec2_vpc_igw:
        state: detached
        vpc_id: "{{ vpc_id }}"
        internet_gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
        region: "{{ region }}"
      when: vpc_id is defined and igw_info.internet_gateways is defined and igw_info.internet_gateways|length > 0

    - name: Delete Internet Gateway
      amazon.aws.ec2_vpc_igw:
        state: absent
        internet_gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
        region: "{{ region }}"
      when: vpc_id is defined and igw_info.internet_gateways is defined and igw_info.internet_gateways|length > 0

    # Delete route tables
    - name: Lookup all non-main route tables in VPC
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_rt_info
      when: vpc_id is defined

    - name: Get non-main route table IDs
      set_fact:
        non_main_route_table_ids: >-
          {{ vpc_rt_info.route_tables | selectattr('associations', 'defined') | selectattr('associations', 'equalto', []) | map(attribute='route_table_id') | list }}
      when: vpc_id is defined and vpc_rt_info.route_tables is defined and vpc_rt_info.route_tables|length > 0

    - name: Delete all non-main route tables in VPC
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item }}"
        state: absent
        region: "{{ region }}"
        lookup: id
      loop: "{{ non_main_route_table_ids | default([]) }}"
      when: vpc_id is defined and non_main_route_table_ids is defined and non_main_route_table_ids|length > 0


    # Delete subnets
    - name: Delete public subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ public_subnet_cidr }}"
        vpc_id: "{{ vpc_id | default(omit) }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined

    - name: Delete private subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ private_subnet_cidr }}"
        vpc_id: "{{ vpc_id | default(omit) }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined


    # Lookup all ENIs in VPC (must be after subnet deletion, before security group deletion)
    - name: Lookup all ENIs in VPC
      amazon.aws.ec2_eni_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_eni_info
      when: vpc_id is defined

    # Detach and delete all ENIs in VPC
    - name: Detach and delete all ENIs in VPC
      amazon.aws.ec2_eni:
        eni_id: "{{ item.network_interface_id }}"
        state: absent
        region: "{{ region }}"
      loop: "{{ vpc_eni_info.network_interfaces }}"
      when: vpc_id is defined and vpc_eni_info.network_interfaces is defined and vpc_eni_info.network_interfaces|length > 0

    # Lookup all security groups in VPC
    - name: Lookup all security groups in VPC
      amazon.aws.ec2_group_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_sg_info
      when: vpc_id is defined

    # Remove all group-to-group rules from security groups
    - name: Remove all group-to-group rules from security groups
      amazon.aws.ec2_security_group:
        group_id: "{{ item.group_id }}"
        name: "{{ item.group_name }}"
        description: "{{ item.description }}"
        region: "{{ region }}"
        purge_rules: yes
        purge_rules_egress: yes
        rules: []
        rules_egress: []
      loop: "{{ vpc_sg_info.security_groups }}"
      when: vpc_id is defined and vpc_sg_info.security_groups is defined and vpc_sg_info.security_groups|length > 0

    # Delete non-default security groups
    - name: Delete non-default security groups
      amazon.aws.ec2_security_group:
        group_id: "{{ item.group_id }}"
        state: absent
        region: "{{ region }}"
      loop: "{{ vpc_sg_info.security_groups }}"
      when: vpc_id is defined and item.group_name != 'default'

    # Delete VPC
    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_id }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined
