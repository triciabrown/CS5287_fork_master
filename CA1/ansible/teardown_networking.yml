---
# Teardown: Delete route tables, subnets, IGW, and VPC
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: us-east-2
    vpc_cidr: "10.0.0.0/16"
    public_subnet_cidr: "10.0.0.0/20"
    private_subnet_cidr: "10.0.128.0/20"
  tasks:
    # Lookup VPC by CIDR
    - name: Lookup VPC by CIDR
      amazon.aws.ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          cidr: "{{ vpc_cidr }}"
      register: vpc_info

    # Set vpc_id fact for reuse
    - name: Set vpc_id fact
      set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
      when: vpc_info.vpcs is defined and vpc_info.vpcs|length > 0

    # Verify no EIPs are still associated with the VPC
    - name: Check for remaining Elastic IPs in VPC before IGW deletion
      amazon.aws.ec2_eip_info:
        region: "{{ region }}"
        filters:
          domain: vpc
      register: remaining_eips_check
      when: vpc_id is defined

    - name: Warn if EIPs still exist in VPC
      debug:
        msg: "WARNING: {{ remaining_eips_check.addresses | length }} Elastic IP(s) still exist in VPC. These may be service-managed EIPs that will be cleaned up automatically by AWS."
      when: vpc_id is defined and remaining_eips_check.addresses is defined and remaining_eips_check.addresses | length > 0

    # Try to force release any remaining EIPs before proceeding
    - name: Attempt to release remaining EIPs before networking teardown
      amazon.aws.ec2_eip:
        public_ip: "{{ item.public_ip }}"
        state: absent
        region: "{{ region }}"
      loop: "{{ remaining_eips_check.addresses | default([]) }}"
      ignore_errors: yes
      when: vpc_id is defined and remaining_eips_check.addresses is defined and remaining_eips_check.addresses | length > 0

    # Wait a moment after attempting EIP release
    - name: Wait after attempting EIP release
      pause:
        seconds: 10
      when: vpc_id is defined and remaining_eips_check.addresses is defined and remaining_eips_check.addresses | length > 0

    # Lookup Internet Gateway attached to VPC
    - name: Lookup Internet Gateway attached to VPC
      amazon.aws.ec2_vpc_igw_info:
        region: "{{ region }}"
        filters:
          attachment.vpc-id: "{{ vpc_id }}"
      register: igw_info
      when: vpc_id is defined

    - name: Delete Internet Gateway (detach and delete)
      amazon.aws.ec2_vpc_igw:
        state: absent
        internet_gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
      when: vpc_id is defined and igw_info.internet_gateways is defined and igw_info.internet_gateways|length > 0

    # Lookup all route tables in VPC
    - name: Lookup all route tables in VPC
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_rt_info
      when: vpc_id is defined

    # Get all plant-monitoring route table IDs
    - name: Get all plant-monitoring route table IDs
      set_fact:
        plant_monitoring_route_table_ids: >-
          {{
            vpc_rt_info.route_tables
            | selectattr('tags.Name', 'defined')
            | selectattr('tags.Name', 'search', '^plant-monitoring')
            | map(attribute='route_table_id')
            | list
          }}
      when: vpc_id is defined and vpc_rt_info.route_tables is defined and vpc_rt_info.route_tables|length > 0

    # Delete all plant monitoring route tables in VPC
    - name: Delete all plant monitoring route tables in VPC
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item }}"
        state: absent
        region: "{{ region }}"
        lookup: id
      loop: "{{ plant_monitoring_route_table_ids | default([]) }}"
      when: vpc_id is defined and plant_monitoring_route_table_ids is defined and plant_monitoring_route_table_ids|length > 0

    # Delete public subnet
    - name: Delete public subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ public_subnet_cidr }}"
        vpc_id: "{{ vpc_id | default(omit) }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined

    # Delete private subnet
    - name: Delete private subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ private_subnet_cidr }}"
        vpc_id: "{{ vpc_id | default(omit) }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined

    # Check for remaining dependencies before VPC deletion
    - name: Check for remaining EC2 instances in VPC
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: remaining_instances
      when: vpc_id is defined

    - name: Check for remaining NAT Gateways in VPC
      amazon.aws.ec2_vpc_nat_gateway_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: remaining_nat_gateways
      when: vpc_id is defined

    - name: Check for remaining Network Interfaces in VPC
      amazon.aws.ec2_eni_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: remaining_enis
      when: vpc_id is defined

    - name: Check for remaining Security Groups in VPC
      amazon.aws.ec2_security_group_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: remaining_security_groups
      when: vpc_id is defined

    - name: Show remaining dependencies
      debug:
        msg:
          - "Remaining EC2 instances: {{ remaining_instances.instances | length if remaining_instances.instances is defined else 0 }}"
          - "Remaining NAT Gateways: {{ remaining_nat_gateways.nat_gateways | length if remaining_nat_gateways.nat_gateways is defined else 0 }}"
          - "Remaining ENIs: {{ remaining_enis.network_interfaces | length if remaining_enis.network_interfaces is defined else 0 }}"
          - "Remaining Security Groups: {{ remaining_security_groups.security_groups | length if remaining_security_groups.security_groups is defined else 0 }}"
      when: vpc_id is defined

    # Delete VPC
    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_id }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined