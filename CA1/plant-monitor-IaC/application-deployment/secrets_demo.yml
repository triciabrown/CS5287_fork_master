---
# Example: Secure Secret Retrieval from AWS Secrets Manager
# This playbook demonstrates how to retrieve secrets securely in Ansible

- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Demo - Retrieve MongoDB credentials from AWS Secrets Manager
      amazon.aws.aws_secret:
        name: "{{ mongodb_credentials_secret }}"
        region: "{{ aws_region | default('us-east-2') }}"
      register: mongodb_secret
      no_log: true  # Never log secret values

    - name: Demo - Parse MongoDB credentials  
      set_fact:
        mongodb_creds: "{{ mongodb_secret.secret | from_json }}"
      no_log: true

    - name: Demo - Show connection info (without passwords)
      debug:
        msg:
          - "MongoDB Database: {{ mongodb_creds.database_name }}"
          - "MongoDB App User: {{ mongodb_creds.app_username }}"
          - "Connection available: {{ mongodb_creds.app_username is defined }}"

    - name: Demo - Retrieve Home Assistant credentials
      amazon.aws.aws_secret:
        name: "{{ homeassistant_credentials_secret }}"
        region: "{{ aws_region | default('us-east-2') }}"
      register: homeassistant_secret
      no_log: true

    - name: Demo - Parse Home Assistant credentials
      set_fact:
        ha_creds: "{{ homeassistant_secret.secret | from_json }}"
      no_log: true

    - name: Demo - Show Home Assistant info (without passwords)
      debug:
        msg:
          - "Home Assistant Admin User: {{ ha_creds.admin_username }}"
          - "MQTT User: {{ ha_creds.mqtt_username }}"
          - "Credentials available: {{ ha_creds.admin_username is defined }}"

# Example of how to use in actual deployment playbooks:
# 
# - name: Configure MongoDB with secure credentials
#   template:
#     src: mongod.conf.j2
#     dest: /etc/mongod.conf
#   vars:
#     mongodb_admin_user: "{{ mongodb_creds.root_username }}"
#     mongodb_admin_pass: "{{ mongodb_creds.root_password }}"
#     mongodb_app_user: "{{ mongodb_creds.app_username }}"  
#     mongodb_app_pass: "{{ mongodb_creds.app_password }}"
#   no_log: true
#
# - name: Start MongoDB with authentication
#   docker_compose:
#     project_src: /opt/mongodb
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: "{{ mongodb_creds.root_username }}"
#       MONGO_INITDB_ROOT_PASSWORD: "{{ mongodb_creds.root_password }}"
#   no_log: true