1
00:00:01,418 --> 00:00:03,992
All right,
let's talk about, container networking.

2
00:00:03,992 --> 00:00:07,556
And this is not the end all, end
all lectures on container tech, right?

3
00:00:07,655 --> 00:00:08,975
This is just a primer.

4
00:00:08,975 --> 00:00:12,605
And there's a lot to cover in
in this on the different types of networks

5
00:00:12,803 --> 00:00:17,555
and what that means when you're deploying
and understanding them, is very important

6
00:00:17,786 --> 00:00:18,578
when you're trying

7
00:00:18,578 --> 00:00:22,043
to create these ecosystem of microservices
that talk to each other.

8
00:00:22,340 --> 00:00:24,716
So let's dive right in.

9
00:00:24,716 --> 00:00:29,138
So the first are the basic building blocks
that are created.

10
00:00:29,171 --> 00:00:32,570
So if I look at the basic building blocks
every container

11
00:00:32,570 --> 00:00:35,903
gets its own network
namespace individual container.

12
00:00:35,903 --> 00:00:39,995
By default
it gets its own networking, namespace.

13
00:00:40,325 --> 00:00:44,714
It means it has isolated
interfaces, routes, firewalls, rules.

14
00:00:44,714 --> 00:00:47,816
Everything is in
for that individual container.

15
00:00:48,542 --> 00:00:51,545
They're managed via IP, a net, and s

16
00:00:52,040 --> 00:00:55,835
or automatically
by the individual, orchestrators.

17
00:00:56,198 --> 00:00:56,627
Right?

18
00:00:56,627 --> 00:01:00,389
So it's important to understand,
if I have a container running,

19
00:01:01,478 --> 00:01:05,735
that, Ethernet zero f eth0

20
00:01:06,725 --> 00:01:08,705
is the, on container A,

21
00:01:08,705 --> 00:01:11,741
and I can have any eth0 on container B

22
00:01:12,104 --> 00:01:15,338
when it, maps into the individual host,

23
00:01:15,503 --> 00:01:19,463
they have their own virtual, interface
there that are uniquely named.

24
00:01:19,859 --> 00:01:23,489
But in the container themselves,
they can have the same names

25
00:01:23,489 --> 00:01:25,865
because they have their own own namespace.

26
00:01:25,865 --> 00:01:26,030
Right?

27
00:01:26,030 --> 00:01:28,901
They're completely isolated.
One of the reasons they did this

28
00:01:28,901 --> 00:01:32,234
is because I can define in an image
very easily,

29
00:01:33,686 --> 00:01:35,105
the same exact.

30
00:01:35,105 --> 00:01:39,263
I can have the same exact image
running in a, in multiple containers,

31
00:01:39,494 --> 00:01:41,507
and they're all going to have
the same network interface.

32
00:01:41,507 --> 00:01:45,203
I'm going to have all that, which means
as a developer, it's much easier for me.

33
00:01:45,203 --> 00:01:48,206
I don't have to write special code
to handle.

34
00:01:48,767 --> 00:01:52,892
What is the the networking, card
that's on here?

35
00:01:52,892 --> 00:01:54,344
All that,
all that's taken care of for you.

36
00:01:54,344 --> 00:01:57,644
And it's the same everywhere,
but because it's the same everywhere,

37
00:01:57,809 --> 00:02:00,746
it means that there's some back end things

38
00:02:00,746 --> 00:02:04,046
that have to happen right in order
to talk to these containers,

39
00:02:04,343 --> 00:02:07,874
because they're all listening
on their own virtual, Ethernet,

40
00:02:08,963 --> 00:02:10,382
port their or their,

41
00:02:10,382 --> 00:02:13,583
their own virtual network,
I should say not Ethernet port.

42
00:02:14,441 --> 00:02:16,454
All right. Let's take a look.

43
00:02:16,454 --> 00:02:21,998
So if I look real closely at this,
I've got these virtual Ethernet pairs.

44
00:02:22,460 --> 00:02:25,859
One is running on the host
and one is running

45
00:02:26,156 --> 00:02:29,258
on the in the container itself. Right.

46
00:02:29,489 --> 00:02:32,492
So one end of the container namespaces.

47
00:02:33,053 --> 00:02:35,198
You know, network eth0.

48
00:02:35,198 --> 00:02:36,386
That's the network card.

49
00:02:36,386 --> 00:02:39,389
And the other one will be on virtual
Ethernet,

50
00:02:39,719 --> 00:02:42,722
ABC 123 XYZ, whatever it is.

51
00:02:42,887 --> 00:02:43,580
Right.

52
00:02:43,580 --> 00:02:46,880
When packets are sent to one end, they're
automatically sent to the other end.

53
00:02:47,177 --> 00:02:49,685
They appear at the other end
automatically.

54
00:02:49,685 --> 00:02:50,213
Right.

55
00:02:50,213 --> 00:02:53,216
So that's important to understand
that distinction.

56
00:02:53,315 --> 00:02:57,638
When it comes in on one end,
it automatically hits the other end okay.

57
00:02:58,265 --> 00:02:59,618
All right.

58
00:02:59,618 --> 00:03:03,743
So let's take a look at that concept with
something called a Linux bridge.

59
00:03:04,304 --> 00:03:09,089
So with the Linux bridge it's a host
level bridge that bridges between

60
00:03:10,112 --> 00:03:13,379
the Docker container and the host.

61
00:03:14,105 --> 00:03:17,240
Remember that virtual interface
that I have there

62
00:03:17,801 --> 00:03:22,124
that is going to be mapped to the eth0
in the container.

63
00:03:23,378 --> 00:03:24,005
Right.

64
00:03:24,005 --> 00:03:27,668
So what it means is
the host can connect to multiple,

65
00:03:28,493 --> 00:03:31,397
of these, virtual Ethernet

66
00:03:31,397 --> 00:03:37,139
and so that means that I can have the host
now connect to multiple containers

67
00:03:37,469 --> 00:03:40,472
through the different virtual Ethernet.

68
00:03:41,363 --> 00:03:43,376
Interfaces.

69
00:03:43,376 --> 00:03:43,970
Okay.

70
00:03:43,970 --> 00:03:46,577
It acts kind of like a virtual switch.

71
00:03:46,577 --> 00:03:49,778
It learns with, the virtual Mac addresses.

72
00:03:50,174 --> 00:03:55,289
And forwards to the individual ports
that I've specified on, on the bridge.

73
00:03:55,289 --> 00:03:57,995
Now, here's here's
where things get a little tricky.

74
00:03:57,995 --> 00:04:00,965
If I have the same,

75
00:04:01,130 --> 00:04:05,783
port mapping to multiple containers,
I can't do that.

76
00:04:07,037 --> 00:04:07,268
Right.

77
00:04:07,268 --> 00:04:10,271
Because the switch won't know
which one to get to go to.

78
00:04:10,271 --> 00:04:12,911
And in the default Linux bridge,

79
00:04:12,911 --> 00:04:16,079
in this case, it won't round robin
or anything like that.

80
00:04:16,079 --> 00:04:17,894
It'll actually give you an error.

81
00:04:17,894 --> 00:04:20,765
So if I have on the Linux bridge,
I say port

82
00:04:20,765 --> 00:04:24,758
88 is going to map to, all the containers.

83
00:04:24,758 --> 00:04:26,375
That won't work.

84
00:04:26,375 --> 00:04:29,840
I have to map to individual, containers.

85
00:04:30,038 --> 00:04:34,295
So I may have an 8080
that maps to container one 8080.

86
00:04:34,493 --> 00:04:39,410
I may have an 8081 maps to container
two, port 8080

87
00:04:40,136 --> 00:04:43,304
or a third one 8082

88
00:04:43,337 --> 00:04:46,802
mapping to port 8080 on a third container.

89
00:04:47,297 --> 00:04:47,561
Right.

90
00:04:47,561 --> 00:04:51,092
I can't assign all those containers
to the same one in a Linux bridge.

91
00:04:52,115 --> 00:04:53,303
Okay.

92
00:04:53,303 --> 00:04:54,689
That's important to understand.

93
00:04:54,689 --> 00:04:56,867
Well, there are some techniques
I know you're saying,

94
00:04:56,867 --> 00:04:59,111
but Darren,
I know, I know, I've done this before.

95
00:04:59,111 --> 00:05:03,104
There are some techniques with different
networking techniques that can do that.

96
00:05:03,104 --> 00:05:07,262
But the Linux bridge, that's
that's the most simplest way to do things.

97
00:05:07,262 --> 00:05:09,275
That's what it means.

98
00:05:09,275 --> 00:05:11,453
Okay. So,

99
00:05:11,453 --> 00:05:14,852
this is like I've already mentioned,
this is the most common

100
00:05:15,182 --> 00:05:20,231
and it's the default, Docker network
is the bridge, which as I mentioned

101
00:05:20,231 --> 00:05:26,996
before, traffic goes from the container
to the virtual interface to the bridge to,

102
00:05:28,019 --> 00:05:30,361
a virtual interface
and to another container.

103
00:05:30,361 --> 00:05:34,948
If I want to connect two containers
together, the host actually uses a Nat

104
00:05:34,948 --> 00:05:38,380
for external, access, to access,

105
00:05:38,908 --> 00:05:41,911
that, virtual bridge
that I have sitting there.

106
00:05:42,076 --> 00:05:42,604
Right.

107
00:05:42,604 --> 00:05:47,323
So even though, Docker containers
that are attached to the host bridge

108
00:05:47,851 --> 00:05:50,491
will share the same subnet,
they're still going through the bridge

109
00:05:50,491 --> 00:05:52,834
to communicate with each other, right.

110
00:05:52,834 --> 00:05:55,573
Because the host
has has all those mappings in there.

111
00:05:55,573 --> 00:05:56,266
And what to do.

112
00:05:59,500 --> 00:05:59,863
Okay.

113
00:05:59,863 --> 00:06:03,757
Let's take a look at some of the,
different modes that are out there.

114
00:06:04,186 --> 00:06:07,222
Right. A default Docker bridge.

115
00:06:07,354 --> 00:06:10,819
There's a great plant
UML diagram in the lecture notes.

116
00:06:11,248 --> 00:06:12,139
It's so big.

117
00:06:12,139 --> 00:06:14,713
I didn't want to put it on here
because it would be too small.

118
00:06:14,713 --> 00:06:17,716
But take a look at it. In the lecture
notes.

119
00:06:18,211 --> 00:06:23,557
The idea here again is that the containers
are, attached to the host bridge.

120
00:06:23,557 --> 00:06:27,022
By default,
all the containers share the same subnet.

121
00:06:27,880 --> 00:06:30,421
And that all that communication is going

122
00:06:30,421 --> 00:06:33,721
through that bridge
from one container to another.

123
00:06:34,150 --> 00:06:37,648
And anyone that's accessing from
the outside is accessing through,

124
00:06:38,308 --> 00:06:41,311
a Nat on that host.

125
00:06:42,169 --> 00:06:42,697
Okay.

126
00:06:42,697 --> 00:06:44,347
Let's look at the host networking.

127
00:06:44,347 --> 00:06:47,350
So containers share the,

128
00:06:47,779 --> 00:06:50,782
share a host network namespace.

129
00:06:51,277 --> 00:06:53,983
There's no isolation
if I'm using host networking.

130
00:06:53,983 --> 00:06:57,745
Now, we mentioned in another lecture
that in only on Linux

131
00:06:57,745 --> 00:06:59,296
can I do host networking.

132
00:06:59,296 --> 00:07:03,223
So what this means here
is that the container

133
00:07:03,223 --> 00:07:07,315
is not isolated
from all the traffic coming into the host,

134
00:07:07,678 --> 00:07:13,288
and it maps to a specific host interface,
and it's shared with the host itself.

135
00:07:13,486 --> 00:07:18,469
So if it's eth0
it's going to be F0 on on the host.

136
00:07:18,469 --> 00:07:19,327
Right.

137
00:07:19,327 --> 00:07:23,386
There is no isolation here
and it defeats some of the purpose,

138
00:07:23,617 --> 00:07:27,148
but it could be for high performance
and low isolation.

139
00:07:27,148 --> 00:07:32,395
So again this only works on Linux hosts
that are doing this okay.

140
00:07:33,253 --> 00:07:34,771
You can use these.

141
00:07:34,771 --> 00:07:37,774
But remember
you lose some of the isolation, but

142
00:07:38,137 --> 00:07:42,031
you decrease the amount of latency
and increase some of the throughput

143
00:07:42,031 --> 00:07:43,879
that can happen in these cases.

144
00:07:45,496 --> 00:07:46,189
Okay.

145
00:07:46,189 --> 00:07:49,192
If I don't specify,

146
00:07:49,291 --> 00:07:51,139
a network, if I say none,

147
00:07:51,139 --> 00:07:54,736
the container has its own namespace,
but no interfaces,

148
00:07:54,736 --> 00:07:57,937
which means you're right,
it can't talk to anything else.

149
00:07:58,597 --> 00:08:00,478
Right? Nothing can talk to it.

150
00:08:00,478 --> 00:08:01,171
It's use.

151
00:08:01,171 --> 00:08:04,735
It's useful for some specialized
networking setup, type things

152
00:08:04,966 --> 00:08:07,969
where I don't want
any anyone. Accessing it.

153
00:08:08,134 --> 00:08:12,028
And it only can access the loopback,
mechanism that's in there.

154
00:08:12,028 --> 00:08:16,021
So these are good for specific things
where you don't want network.

155
00:08:16,483 --> 00:08:18,892
Specifically.

156
00:08:18,892 --> 00:08:19,552
All right.

157
00:08:19,552 --> 00:08:24,205
Then there's a concept of a mac,
Vlan and IPV LAN.

158
00:08:24,205 --> 00:08:29,287
So this is where I directly attach
the containers virtual interface

159
00:08:29,650 --> 00:08:33,775
to a physical Nic running on the device.

160
00:08:34,072 --> 00:08:39,847
So if I do this, then I can pin
certain containers to certain network

161
00:08:39,847 --> 00:08:42,817
cards, sitting or network interfaces

162
00:08:42,817 --> 00:08:45,721
sitting inside on the host machine.

163
00:08:45,721 --> 00:08:48,592
So that attaches to that physical Nic.

164
00:08:48,592 --> 00:08:51,166
This is great
if I need to really fine tune,

165
00:08:52,552 --> 00:08:54,961
containers so that,

166
00:08:54,961 --> 00:08:58,624
they're using the best networking
for what they need it for.

167
00:08:58,624 --> 00:09:01,627
So if I have some admin
type of containers,

168
00:09:01,825 --> 00:09:04,828
I'll use an admin Nic that's
maybe only a one gig,

169
00:09:05,851 --> 00:09:08,854
network interface, but if I have some,

170
00:09:09,184 --> 00:09:12,517
containers
that I need to tie to my 100 gig.

171
00:09:13,210 --> 00:09:15,751
Nic, because I it's consuming

172
00:09:15,751 --> 00:09:18,853
a lot of data and spitting data out,
or I've got several of those.

173
00:09:18,853 --> 00:09:21,922
I want to tie
those to those specific, NICs.

174
00:09:22,285 --> 00:09:24,991
So that gives me that ability to,

175
00:09:24,991 --> 00:09:27,928
tie those to specific NICs.

176
00:09:27,928 --> 00:09:30,931
Okay.

177
00:09:30,931 --> 00:09:31,789
All right.

178
00:09:31,789 --> 00:09:34,792
This is all on one machine so far.

179
00:09:34,891 --> 00:09:36,640
But how good is that?

180
00:09:36,640 --> 00:09:40,600
Unless I have a machine
that's got, you know, 12,000 cores

181
00:09:40,600 --> 00:09:43,603
and, 20PB of memory

182
00:09:43,669 --> 00:09:47,365
and, you know, exabytes of data
sitting all on one machine.

183
00:09:48,487 --> 00:09:49,939
That is not very useful, right?

184
00:09:49,939 --> 00:09:52,546
I really want to run on multiple host.

185
00:09:52,546 --> 00:09:55,978
Well, this is where things
get really interesting.

186
00:09:56,242 --> 00:10:00,169
And one of the networks I like to use
the most is an overlay network,

187
00:10:00,400 --> 00:10:03,865
which is a micro segmented network
that can connect, connect

188
00:10:04,261 --> 00:10:08,254
multiple machines
all on different subnets.

189
00:10:09,277 --> 00:10:12,049
They can be on the same subnet
or different subnets.

190
00:10:12,049 --> 00:10:15,085
But this overlay network
can actually create

191
00:10:15,283 --> 00:10:19,606
an overlay subnet on top of an underlying

192
00:10:20,728 --> 00:10:21,883
network topology.

193
00:10:21,883 --> 00:10:24,886
So it's independent of the network
topology that's there.

194
00:10:25,777 --> 00:10:28,516
So the way that this works is again

195
00:10:28,516 --> 00:10:31,750
we still have that virtual Ethernet

196
00:10:32,047 --> 00:10:36,304
interface on container A
and container B in this case.

197
00:10:36,304 --> 00:10:39,274
But in this case
they're running on different host.

198
00:10:39,274 --> 00:10:44,356
And then instead of it going to the bridge
it's going to go to an overlay network.

199
00:10:44,686 --> 00:10:48,217
And the overlay network
can span multiple hosts.

200
00:10:48,217 --> 00:10:51,682
And then create a Vlan tunnel right.

201
00:10:51,682 --> 00:10:55,807
That connects those hosts
into its own network.

202
00:10:56,434 --> 00:10:57,127
Right.

203
00:10:57,127 --> 00:11:03,033
So on each one of these host,
I got to run a network agent, right.

204
00:11:03,066 --> 00:11:05,871
With Docker
Swarm it's running a Docker swarm agent.

205
00:11:05,871 --> 00:11:07,686
There's flannel, there's weave.

206
00:11:07,686 --> 00:11:08,841
There's calico.

207
00:11:08,841 --> 00:11:12,900
To manage
those tunnels between the different host

208
00:11:13,329 --> 00:11:16,068
and these tunnels create their own,

209
00:11:18,015 --> 00:11:21,018
subnet that's running on top of,

210
00:11:21,447 --> 00:11:24,417
the network
that's already established there.

211
00:11:24,417 --> 00:11:30,093
So this gives me isolation so I can have
two containers on two different hosts

212
00:11:30,456 --> 00:11:34,350
that are on two different subnets,
look like they're on the same subnet,

213
00:11:34,581 --> 00:11:38,508
have the same, firewall rules
for that, subnet.

214
00:11:38,871 --> 00:11:40,389
It's very powerful tool.

215
00:11:40,389 --> 00:11:42,204
And there's other ones out there.

216
00:11:42,204 --> 00:11:44,415
There's other

217
00:11:44,415 --> 00:11:47,418
what's this Vlan or Vxlan

218
00:11:47,484 --> 00:11:50,256
type of, overlay networks

219
00:11:50,256 --> 00:11:53,226
that are more high, secure
or higher speed.

220
00:11:53,391 --> 00:11:55,767
There's, more highly configurable.

221
00:11:55,767 --> 00:11:57,516
There's different options for this.

222
00:11:57,516 --> 00:12:01,806
This is where Kubernetes really shines
because they give you the ability

223
00:12:01,806 --> 00:12:04,776
to plug in different, overlay network,

224
00:12:05,733 --> 00:12:07,548
controllers and things like that,

225
00:12:07,548 --> 00:12:11,376
where with Docker Swarm, Docker
Swarm picks one and goes with it.

226
00:12:11,508 --> 00:12:12,102
Right.

227
00:12:12,102 --> 00:12:16,260
So if I don't really care about,
configuring a network

228
00:12:16,260 --> 00:12:19,263
because I've got the standard
one is just fine for me.

229
00:12:19,626 --> 00:12:23,091
Docker swarm is a good way to go
if I do care about maybe higher

230
00:12:23,091 --> 00:12:26,424
security,
higher scalability, things like that.

231
00:12:28,008 --> 00:12:29,625
Then I will want to

232
00:12:29,625 --> 00:12:32,694
I will want to work with,
a different network controller.

233
00:12:33,453 --> 00:12:35,796
Important here that the hosts appear

234
00:12:35,796 --> 00:12:38,799
on the same L2 network.

235
00:12:38,898 --> 00:12:41,901
Like I said, the same the same subnetwork.

236
00:12:44,607 --> 00:12:45,036
Okay.

237
00:12:45,036 --> 00:12:46,950
There's, different flavors.

238
00:12:46,950 --> 00:12:51,306
So here is a BGP, routing based, calico.

239
00:12:51,306 --> 00:12:53,847
So this is calico. How calico works.

240
00:12:53,847 --> 00:12:57,675
It uses
BGP routing instead of encapsulation.

241
00:12:58,005 --> 00:13:01,239
So each host programs
the Linux routing tables.

242
00:13:02,031 --> 00:13:03,945
For the container subnets.

243
00:13:03,945 --> 00:13:06,123
So that's kind of the calico.

244
00:13:06,123 --> 00:13:07,608
Way to go.

245
00:13:07,608 --> 00:13:11,832
The advantages here is there's no overhead
like I have in the other ones where

246
00:13:11,832 --> 00:13:14,835
there is overhead where they're doing
the mappings dynamically.

247
00:13:15,429 --> 00:13:17,640
This is more,

248
00:13:17,640 --> 00:13:21,072
happening at the L3 native L3, routing.

249
00:13:21,303 --> 00:13:24,966
So I don't have some of the overhead,
on speed

250
00:13:24,966 --> 00:13:28,728
between, these calico is an easy,

251
00:13:29,718 --> 00:13:32,391
plug in with, Kubernetes.

252
00:13:32,391 --> 00:13:34,536
So, in fact, I can't remember.

253
00:13:34,536 --> 00:13:40,344
Kubernetes does this, natively out of the
that if that's their default or not.

254
00:13:40,641 --> 00:13:45,096
But I know that it's use
with a lot of success

255
00:13:45,096 --> 00:13:48,066
in, Kubernetes, ecosystem.

256
00:13:49,518 --> 00:13:50,376
Okay.

257
00:13:50,376 --> 00:13:55,722
Another interesting thing is people
have started looking at instead of layer

258
00:13:55,722 --> 00:13:58,560
two, layer
three in the network on the same subnets,

259
00:13:58,560 --> 00:14:01,563
they're moving all the way up to layer
seven, the application layer,

260
00:14:02,256 --> 00:14:04,434
for a overlay network.

261
00:14:04,434 --> 00:14:09,615
So instead of eating concerning yourself
with subnets, they're going to directly to

262
00:14:10,836 --> 00:14:13,938
this idea of connecting by name.

263
00:14:14,631 --> 00:14:14,994
Right.

264
00:14:14,994 --> 00:14:20,406
And a great example of this is it's
you or link or D does this sort of thing,

265
00:14:21,099 --> 00:14:25,785
which means that the containers
talk to each other by name and,

266
00:14:26,544 --> 00:14:30,141
it can provide a quite, a quite
a bit of really interesting concepts

267
00:14:30,141 --> 00:14:34,926
like load balancing can be built
into this, encryption,

268
00:14:34,926 --> 00:14:38,886
TLS encryption at the application layer
instead of at the network layer.

269
00:14:39,018 --> 00:14:41,559
So moves everything up to that
higher layer.

270
00:14:41,559 --> 00:14:47,169
Some of the downsides of service meshes,
especially in, edge computing

271
00:14:47,400 --> 00:14:52,086
when you're in multi-cloud
or hybrid cloud computing is,

272
00:14:52,878 --> 00:14:56,376
these tend
to be very chatty on the network

273
00:14:56,541 --> 00:15:00,897
because you're constantly checking
to see, where services are.

274
00:15:01,194 --> 00:15:01,557
All right.

275
00:15:01,557 --> 00:15:05,286
So, be a little bit mindful
if you're doing some hybrid stuff,

276
00:15:05,286 --> 00:15:08,586
whether you want to do
an echo service mesh or not.

277
00:15:09,246 --> 00:15:13,074
Because there is a lot of chatty overhead
that goes on on between them.

278
00:15:13,404 --> 00:15:13,899
Right?

279
00:15:13,899 --> 00:15:17,232
Especially if you're working in contested
environments on the edge.

280
00:15:19,146 --> 00:15:19,641
And you

281
00:15:19,641 --> 00:15:22,644
don't have that full network connectivity
all the time, it's

282
00:15:22,644 --> 00:15:26,340
you, can actually isolate services
that are still running.

283
00:15:26,670 --> 00:15:30,036
If there's hiccups in the network because
they all say it doesn't exist anymore.

284
00:15:30,366 --> 00:15:33,237
So be mindful of that.

285
00:15:33,237 --> 00:15:36,933
Also, they use a sidecar proxy,
which is really interesting.

286
00:15:37,494 --> 00:15:40,332
For the individual service, it's
almost like this little sidecar

287
00:15:40,332 --> 00:15:42,543
that's sitting there
that's handling all the network traffic

288
00:15:42,543 --> 00:15:46,701
in and out of the sidecars and sidecars
as well, are really talking to each other.

289
00:15:48,912 --> 00:15:49,341
All right.

290
00:15:49,341 --> 00:15:52,344
So let's talk about the container network
interface.

291
00:15:53,631 --> 00:15:54,786
In Kubernetes

292
00:15:54,786 --> 00:15:58,284
it's a pluggable standard for Kubernetes
and other orchestrators.

293
00:15:58,614 --> 00:16:01,188
Like I said Mesos had it.

294
00:16:01,188 --> 00:16:04,686
And I do believe Nomad has it as well.

295
00:16:04,686 --> 00:16:07,656
There's very popular CNN plug ins

296
00:16:07,722 --> 00:16:11,847
or CNI plug ins, calico,
which is the BGP routing.

297
00:16:11,847 --> 00:16:13,596
Remember,
that's changing the routing tables

298
00:16:13,596 --> 00:16:16,698
on the individual machines, flannel,
which is creating

299
00:16:16,698 --> 00:16:19,800
a full blown Vxlan, overlay network.

300
00:16:20,196 --> 00:16:22,011
There's a weave net,

301
00:16:22,011 --> 00:16:25,179
which is a mesh overlay,
which we've talked about that as well.

302
00:16:25,179 --> 00:16:25,575
Right.

303
00:16:25,575 --> 00:16:30,788
A service mesh, psyllium, and bridge,
which we're all familiar with.

304
00:16:30,788 --> 00:16:31,052
Bridge.

305
00:16:31,052 --> 00:16:34,616
So the CNN configuration,
you're going to see these,

306
00:16:35,342 --> 00:16:38,345
being defined for Kubernetes, primarily

307
00:16:39,005 --> 00:16:42,437
Docker just uses bridge and Docker Swarm,

308
00:16:42,965 --> 00:16:46,166
uses a vxlan overlay, concept.

309
00:16:48,740 --> 00:16:49,037
All right.

310
00:16:49,037 --> 00:16:54,053
So here is a, sequence diagram
that shows how a Kubernetes

311
00:16:54,053 --> 00:16:58,475
orchestrator is going to, set
everything up.

312
00:16:58,475 --> 00:17:00,620
So it's first going to read the different,

313
00:17:00,620 --> 00:17:03,986
CNN plugins that are available
and their configurations.

314
00:17:04,283 --> 00:17:06,494
It's going to create,

315
00:17:06,494 --> 00:17:07,880
a network namespace.

316
00:17:07,880 --> 00:17:11,609
It's going to create the
the virtual Ethernet pairs

317
00:17:12,038 --> 00:17:15,140
that are required
right between the container and the host.

318
00:17:15,734 --> 00:17:20,552
And then it's going to configure all the,
IP and routes that it needs to,

319
00:17:20,849 --> 00:17:24,413
and it's going to attach the host
to a bridge or an overlay network.

320
00:17:24,776 --> 00:17:27,779
And then we're off of off and running.

321
00:17:27,845 --> 00:17:28,802
Right.

322
00:17:28,802 --> 00:17:31,079
And that is

323
00:17:31,079 --> 00:17:34,676
and then I've got tear down too,
that I need to do that's described there.

324
00:17:34,676 --> 00:17:36,458
So that gives you kind of an idea

325
00:17:36,458 --> 00:17:39,032
of everything that has to happen
to set all this stuff up.

326
00:17:40,847 --> 00:17:41,243
All right.

327
00:17:41,243 --> 00:17:42,794
So the next thing we

328
00:17:42,794 --> 00:17:46,622
we kind of touched on this a little bit
with the mesh networks, but the,

329
00:17:47,249 --> 00:17:51,671
the bridge networks, the overlay networks
and the BGP networks

330
00:17:52,001 --> 00:17:55,961
also have the, service discovery,
because it doesn't

331
00:17:55,961 --> 00:17:58,766
do me any good to hardcode
IP paths in the images.

332
00:17:58,766 --> 00:18:00,449
That just doesn't work.

333
00:18:00,449 --> 00:18:00,779
Right.

334
00:18:00,779 --> 00:18:03,782
I need to that to be more dynamic. So,

335
00:18:04,046 --> 00:18:08,105
all of these network techniques
use a DNS domain name service.

336
00:18:08,237 --> 00:18:11,966
So in my docker compose or helm

337
00:18:11,966 --> 00:18:14,969
charts, whatever I'm using, I can specify,

338
00:18:16,652 --> 00:18:18,962
two services
that need to talk to each other.

339
00:18:18,962 --> 00:18:22,856
And the DNS will know
when that container comes up.

340
00:18:22,856 --> 00:18:27,212
It registers with the DNS
and says I am this container.

341
00:18:27,212 --> 00:18:30,215
This is my host hostname.

342
00:18:30,215 --> 00:18:30,545
Right.

343
00:18:30,545 --> 00:18:35,627
So now I can access these containers
by a hostname which is really important

344
00:18:35,924 --> 00:18:38,927
when you're orchestrating
multiple containers.

345
00:18:39,026 --> 00:18:42,425
And you need them to talk to each other
and share information with each other.

346
00:18:42,854 --> 00:18:43,118
Right.

347
00:18:44,867 --> 00:18:47,969
Just like I mentioned before it, Docker
Swarm

348
00:18:48,233 --> 00:18:52,424
chooses a specific methodology to use it.

349
00:18:52,424 --> 00:18:56,153
Does DNS,
internally it's got an embedded DNS

350
00:18:56,384 --> 00:18:59,387
where Kubernetes lets me,

351
00:18:59,849 --> 00:19:02,555
plug in my own different ones.

352
00:19:02,555 --> 00:19:07,076
Either core DNS or kube DNS, and
there's others I can plug into it as well.

353
00:19:07,637 --> 00:19:07,835
Right.

354
00:19:07,835 --> 00:19:10,838
So that's important to understand.

355
00:19:11,003 --> 00:19:14,831
Kubernetes more configurable Docker swarm.

356
00:19:15,260 --> 00:19:17,042
It is

357
00:19:17,042 --> 00:19:20,045
much more what's the right word.

358
00:19:21,398 --> 00:19:22,421
It's already configured.

359
00:19:22,421 --> 00:19:23,378
It's opinionated.

360
00:19:23,378 --> 00:19:24,665
That's the word I'm looking for.

361
00:19:24,665 --> 00:19:27,008
It's highly opinionated.

362
00:19:27,008 --> 00:19:28,724
So it chooses a way.

363
00:19:28,724 --> 00:19:31,760
And you work in that way
or you don't write,

364
00:19:31,760 --> 00:19:34,763
or you go to Kubernetes
where you can choose whatever you want.

365
00:19:35,291 --> 00:19:35,951
All right.

366
00:19:35,951 --> 00:19:38,393
Security,

367
00:19:38,393 --> 00:19:41,462
and network
policies are really important by default.

368
00:19:41,561 --> 00:19:44,597
Docker containers, have no ports open.

369
00:19:45,125 --> 00:19:48,095
So you have to actually do the mappings
yourself, right.

370
00:19:48,194 --> 00:19:54,002
Like, you notice on the Docker line,
I can say dash p and say which ports

371
00:19:54,002 --> 00:19:57,005
I want mapped from the host to the,

372
00:19:57,500 --> 00:20:00,338
individual, container port.

373
00:20:00,338 --> 00:20:02,615
Right. That's on an individual host.

374
00:20:03,968 --> 00:20:04,364
When I'm

375
00:20:04,364 --> 00:20:07,367
talking about a Docker swarm
or a Kubernetes cluster.

376
00:20:07,697 --> 00:20:11,855
Now, I have firewall rules
that I need to establish in there as well.

377
00:20:12,152 --> 00:20:15,485
And that's important to understand
what the each one

378
00:20:15,485 --> 00:20:18,950
brings to the table
and how to configure those.

379
00:20:19,280 --> 00:20:22,481
A lot of times I've spent,
I can't tell you how many hours

380
00:20:23,372 --> 00:20:25,847
making sure I have the right ports set up.

381
00:20:25,847 --> 00:20:26,408
I said these

382
00:20:26,408 --> 00:20:29,411
should be talking to each other,
but they're not talking to each other.

383
00:20:29,543 --> 00:20:32,942
So making sure that you have those,
and understand

384
00:20:32,942 --> 00:20:35,945
those appropriately is important.

385
00:20:36,935 --> 00:20:37,397
Okay.

386
00:20:37,397 --> 00:20:39,971
Best practices,

387
00:20:39,971 --> 00:20:43,535
single host
development environments, bridge simple.

388
00:20:44,525 --> 00:20:45,746
Easy, easy to use.

389
00:20:45,746 --> 00:20:47,693
Right.

390
00:20:47,693 --> 00:20:50,696
If you want the container
talking to the host network,

391
00:20:51,851 --> 00:20:54,854
use that host, if you need to.

392
00:20:55,580 --> 00:20:59,342
A lot of times you really don't want
a container talking to the host machine.

393
00:20:59,672 --> 00:21:01,652
If you're doing that,
you're doing something wrong.

394
00:21:01,652 --> 00:21:05,315
You should probably have another container
that does that work, for you.

395
00:21:05,744 --> 00:21:06,437
Right.

396
00:21:06,437 --> 00:21:09,077
Leverage network policies,

397
00:21:09,077 --> 00:21:13,037
in cilium, for the least privileged
communications, of course, across,

398
00:21:13,895 --> 00:21:17,591
Kubernetes, cluster,
if you're using that Docker

399
00:21:17,591 --> 00:21:21,881
Swarm by default, kind of set
that up as pretty locked locked down.

400
00:21:21,881 --> 00:21:22,541
Right.

401
00:21:22,541 --> 00:21:25,544
Make sure you're monitoring
your network performance.

402
00:21:25,907 --> 00:21:27,524
Especially with lands.

403
00:21:27,524 --> 00:21:30,230
They can they can get, slow at times.

404
00:21:30,230 --> 00:21:33,266
And making sure
that you've established those, correctly.

405
00:21:33,497 --> 00:21:36,401
And then most importantly,

406
00:21:36,401 --> 00:21:38,546
document your network design.

407
00:21:38,546 --> 00:21:41,615
Don't just leave it up
to to chance, right.

408
00:21:41,945 --> 00:21:44,882
Understand
how things are connected together.

409
00:21:44,882 --> 00:21:48,479
You will spend a lot of time
working through your network, topologies.

410
00:21:48,479 --> 00:21:54,518
If you haven't written down, and designed
and organized, you'll do far better

411
00:21:54,518 --> 00:21:58,016
when you're trying to debug, microservices
talking to each other.

412
00:22:00,853 --> 00:22:01,447
All right.

413
00:22:01,447 --> 00:22:04,714
Go out there and learn more about, Linux,

414
00:22:05,671 --> 00:22:08,674
Linux container networking.

415
00:22:09,136 --> 00:22:11,413
Understand
just the core fundamentals of it.

416
00:22:11,413 --> 00:22:14,977
And that will help you so much further
along when you start looking at,

417
00:22:16,198 --> 00:22:19,168
deploying your own microservice
architectures

418
00:22:19,168 --> 00:22:22,897
and the networking options
that you have there, remember that,

419
00:22:23,590 --> 00:22:28,144
running on a single host is a lot easier
than running on a cluster of machines.

420
00:22:28,144 --> 00:22:31,807
Understanding those different network
topologies and different network

421
00:22:31,807 --> 00:22:35,767
techniques, can be, very important
as you move forward.

422
00:22:35,965 --> 00:22:38,572
Take a look at service meshes.

423
00:22:38,572 --> 00:22:41,575
There's a lot to
there's a lot of benefits to them,

424
00:22:41,905 --> 00:22:45,403
with security controls and routing
and things at the application layer,

425
00:22:45,733 --> 00:22:48,967
but also understand the downsides
to service meshes

426
00:22:49,198 --> 00:22:52,036
and compare and contrast
between the different network types.
