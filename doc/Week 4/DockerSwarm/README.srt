1
00:00:01,517 --> 00:00:01,946
Okay.

2
00:00:01,946 --> 00:00:04,685
Let's talk about container orchestration.
Specifically.

3
00:00:04,685 --> 00:00:09,338
Let's talk about Docker Swarm, which as we
mentioned in previous lectures.

4
00:00:09,602 --> 00:00:12,704
Docker swarm is a built in

5
00:00:12,704 --> 00:00:15,740
orchestrator engine for Docker.

6
00:00:16,235 --> 00:00:20,030
And with the philosophy
behind it to be simple.

7
00:00:20,624 --> 00:00:20,921
All right.

8
00:00:20,921 --> 00:00:25,970
So it's highly opinionated, which means
that it sets things up a certain way

9
00:00:26,267 --> 00:00:30,326
and very little configuration
very little options there.

10
00:00:30,326 --> 00:00:33,329
Unlike Kubernetes
has a lot of different options.

11
00:00:33,362 --> 00:00:36,695
Docker swarm the idea is to make it simple

12
00:00:36,695 --> 00:00:39,698
to have your Docker,

13
00:00:40,523 --> 00:00:44,417
compose file actually run, services

14
00:00:44,417 --> 00:00:48,080
across a set of machines
instead of a single machine.

15
00:00:48,443 --> 00:00:50,126
So that's the idea behind it.

16
00:00:50,126 --> 00:00:53,195
This is great
if you're developing something and,

17
00:00:53,525 --> 00:00:58,607
you're the developer and just focusing on
maybe running things, very quickly,

18
00:00:58,739 --> 00:01:01,742
or if you have an environment
that's, pretty simple, straightforward,

19
00:01:02,237 --> 00:01:03,755
production environment
that you don't need.

20
00:01:03,755 --> 00:01:05,504
Really complicated.

21
00:01:07,121 --> 00:01:10,091
Networking or storage
or anything like that, that Kubernetes

22
00:01:10,091 --> 00:01:13,325
gives you more complex configurations.

23
00:01:14,084 --> 00:01:16,658
So let's take a look at some of the key
concepts here.

24
00:01:16,658 --> 00:01:21,608
First off, the concept instead of
a Kubernetes cluster, we've got a swarm.

25
00:01:22,235 --> 00:01:23,126
Right.

26
00:01:23,126 --> 00:01:25,964
And a swarm is one or more Docker hosts

27
00:01:25,964 --> 00:01:29,165
that are acting
like a single virtual Docker engine.

28
00:01:29,924 --> 00:01:33,026
They're acting like it,
but they don't necessarily behave like it.

29
00:01:33,026 --> 00:01:33,983
Right.

30
00:01:33,983 --> 00:01:38,405
So inside your swarm, you're
going to have nodes inside your swarm,

31
00:01:38,735 --> 00:01:41,903
and the nodes take on different personas,
whether it's a manager node

32
00:01:42,167 --> 00:01:45,071
where it's scheduling
tasks and maintain state,

33
00:01:45,071 --> 00:01:48,074
or a worker node
which is actually running the containers.

34
00:01:48,569 --> 00:01:48,800
Right.

35
00:01:48,800 --> 00:01:52,595
So you've got those two types of nodes
that are out there and the individual

36
00:01:52,595 --> 00:01:54,212
service is

37
00:01:55,334 --> 00:01:58,205
what's
the best way to define it's an end point.

38
00:01:58,205 --> 00:02:03,848
So in the it's an endpoint in the whole
ecosystem that you've established,

39
00:02:04,211 --> 00:02:07,181
it can be served up by multiple

40
00:02:07,181 --> 00:02:10,547
containers of the same type
or one container.

41
00:02:11,306 --> 00:02:14,639
And the the key thing here is that it
defines,

42
00:02:15,530 --> 00:02:18,335
the certain number of replicas
that I can do there

43
00:02:18,335 --> 00:02:22,262
or networks and configurations and secrets
are all contained inside that service.

44
00:02:22,592 --> 00:02:25,595
So if I have replicas, set up,

45
00:02:25,760 --> 00:02:29,357
it will give me continuity
and reliability, even if I have one

46
00:02:29,357 --> 00:02:32,756
replica set up and it fails,
it will kick off automatically.

47
00:02:32,756 --> 00:02:34,208
Again, a new container.

48
00:02:34,208 --> 00:02:37,805
So it handles all that container
orchestration for that specific service.

49
00:02:38,927 --> 00:02:41,435
Then you have individual task.

50
00:02:41,435 --> 00:02:45,230
This is a single container instance
that's running part of a service.

51
00:02:46,517 --> 00:02:46,913
I can

52
00:02:46,913 --> 00:02:49,916
have multiple
tasks running in an individual service.

53
00:02:49,982 --> 00:02:52,721
There's startup tasks
and then there's running tasks

54
00:02:52,721 --> 00:02:54,965
and even shutdown tasks that you can see

55
00:02:54,965 --> 00:02:57,440
that are individual containers
that are running.

56
00:02:57,440 --> 00:03:00,443
Then the next one, probably one of
the most powerful things, is a stack.

57
00:03:01,334 --> 00:03:04,007
And a stack
is made up of a set of services,

58
00:03:04,007 --> 00:03:07,835
or collection of services that are defined
in your Docker compose file.

59
00:03:08,033 --> 00:03:11,036
So I can do a Docker stack deploy

60
00:03:11,663 --> 00:03:15,359
pass in a docker compose file,
and it will instantiate

61
00:03:15,359 --> 00:03:18,395
all those services for me
and have all the can in

62
00:03:18,395 --> 00:03:21,365
containers starting up and running
and everything I need it to do.

63
00:03:21,629 --> 00:03:24,335
It's super cool, very, very cool stuff.

64
00:03:24,335 --> 00:03:27,635
We talked in previous
about different network.

65
00:03:28,592 --> 00:03:31,331
Options and you can use different

66
00:03:31,331 --> 00:03:34,565
networks, in your Docker compose,

67
00:03:35,753 --> 00:03:36,875
overlay networks

68
00:03:36,875 --> 00:03:40,736
are what are primarily used,
but you can also attach to networks.

69
00:03:40,736 --> 00:03:44,894
So I can have two Docker stacks
running from two different Docker

70
00:03:45,125 --> 00:03:49,085
compose files that can actually talk
to each other through a common network

71
00:03:49,283 --> 00:03:53,606
that you can define, either
outside of the,

72
00:03:54,728 --> 00:03:57,995
the docker compose,
or you can define it inside the docker

73
00:03:57,995 --> 00:04:02,648
compose and make it attachable so
someone else can actually use it as well.

74
00:04:02,945 --> 00:04:06,113
So let's talk
let's start talking about Docker

75
00:04:06,278 --> 00:04:09,545
Compose and or Docker Swarm
and how to get things started.

76
00:04:09,875 --> 00:04:12,845
The first thing you need to do
is initialize Docker swarm.

77
00:04:12,977 --> 00:04:14,726
Then you need to add nodes to it.

78
00:04:14,726 --> 00:04:16,838
And then you need to verify those nodes.

79
00:04:16,838 --> 00:04:19,841
The verification of the nodes
is important for security.

80
00:04:20,105 --> 00:04:23,207
If you before when they didn't
have verification of nodes, nodes

81
00:04:23,207 --> 00:04:26,210
could just automatically come in and,

82
00:04:26,507 --> 00:04:28,817
you didn't know who's in your swarm.

83
00:04:28,817 --> 00:04:30,797
This you're passing token keys.

84
00:04:30,797 --> 00:04:34,658
So now they're sharing keys
between each other and it guarantees

85
00:04:34,658 --> 00:04:37,661
more secure, environment.

86
00:04:37,694 --> 00:04:37,958
Okay.

87
00:04:37,958 --> 00:04:41,687
So first we do a Docker swarm init
and we can,

88
00:04:42,380 --> 00:04:44,261
you can just do a Docker
swarm init and you're done

89
00:04:45,548 --> 00:04:46,439
absolute.

90
00:04:46,439 --> 00:04:50,135
Or if you have multiple, nic cards
or multiple

91
00:04:50,828 --> 00:04:55,580
networks already established on the host,
you can specify which subnet you're going

92
00:04:55,580 --> 00:04:59,375
to, advertise on, which will be the subnet

93
00:04:59,375 --> 00:05:02,378
that the management,

94
00:05:02,576 --> 00:05:05,579
network that's going to be used
for this Docker swarm.

95
00:05:05,909 --> 00:05:09,704
People that set up
large systems tend to have 2 or 3 hard

96
00:05:09,704 --> 00:05:14,654
physical networks in their boxes,
and they use one of those like an admin,

97
00:05:15,842 --> 00:05:16,700
network.

98
00:05:16,700 --> 00:05:20,033
They'll use those that subnet
to, to do the advertising.

99
00:05:21,551 --> 00:05:22,145
Okay.

100
00:05:22,145 --> 00:05:26,666
Now then when you get on each individual
node in your swarm

101
00:05:26,831 --> 00:05:30,460
to join the swarm,
you just type in swarm join

102
00:05:30,460 --> 00:05:34,123
and then the token which is the worker
token that was printed out

103
00:05:34,123 --> 00:05:37,126
when you did the Docker init,
they'll give you a token name.

104
00:05:37,324 --> 00:05:39,634
And so you give that token.

105
00:05:39,634 --> 00:05:42,967
And then you give the IP
address of the manager.

106
00:05:42,967 --> 00:05:47,851
And then the port 2377,
you can run into problems

107
00:05:47,851 --> 00:05:51,481
if you're using ubuntu
and it's locked down all the ports.

108
00:05:51,481 --> 00:05:55,540
You need to make sure that you establish
that I need 2377 open

109
00:05:55,540 --> 00:05:58,576
so I can communicate
between, the different hosts,

110
00:06:00,457 --> 00:06:03,427
remember, that for,

111
00:06:04,582 --> 00:06:07,651
for the networking, privileges
and things like that.

112
00:06:07,651 --> 00:06:09,664
Make sure that you do open up those ports

113
00:06:09,664 --> 00:06:12,667
and that these hosts
can actually talk to each other.

114
00:06:13,459 --> 00:06:16,825
They don't have to be on the same subnet,
but they have to be able to,

115
00:06:17,551 --> 00:06:20,554
at least get to the other
subnet of the manager nodes.

116
00:06:20,554 --> 00:06:24,184
You can list all the nodes inside
your swarm with Docker node

117
00:06:24,184 --> 00:06:28,375
ls very common, command
that you should be used to

118
00:06:28,375 --> 00:06:31,939
if you already using Linux,
that ls command for list.

119
00:06:33,358 --> 00:06:37,549
Okay, now that we've got our Docker
swarm initialized and set up

120
00:06:37,549 --> 00:06:41,905
and I've added nodes, let's take a look
at deploying individual services.

121
00:06:42,202 --> 00:06:45,205
Now you can create an individual service

122
00:06:45,700 --> 00:06:48,703
with Docker service create

123
00:06:48,901 --> 00:06:52,201
or you can put in a stack
that has services in it.

124
00:06:53,257 --> 00:06:54,049
We're going to show

125
00:06:54,049 --> 00:06:57,052
first how to do it
outside of a Docker compose file.

126
00:06:57,250 --> 00:07:01,936
And then we'll look at how that runs
inside a docker, compose file.

127
00:07:02,167 --> 00:07:05,302
But anything you do in a Docker
compose file, you can actually do

128
00:07:05,302 --> 00:07:08,305
on the command line as well.

129
00:07:08,767 --> 00:07:12,958
So really quickly to create a service
docker service create

130
00:07:12,958 --> 00:07:14,476
you can give it a name.

131
00:07:14,476 --> 00:07:16,951
You can say how many replicas
you want running.

132
00:07:16,951 --> 00:07:20,416
You can talk about the ports,
the published ports.

133
00:07:20,416 --> 00:07:23,419
The published 80 target is 80.

134
00:07:23,947 --> 00:07:26,389
And you can give the image name
like in this case it's

135
00:07:26,389 --> 00:07:29,590
nginx and I'm grabbing
the latest off of engine X.

136
00:07:29,590 --> 00:07:32,659
Remember
not always wise to always grab latest

137
00:07:32,659 --> 00:07:34,837
because it could change out
from underneath you,

138
00:07:34,837 --> 00:07:39,160
especially if you're hitting a repository
that's a public repo like Docker Hub.

139
00:07:39,226 --> 00:07:40,942
They make updates all the time.

140
00:07:40,942 --> 00:07:41,932
Now you may not care.

141
00:07:41,932 --> 00:07:44,935
You may say, hey,
I actually want the latest all the time,

142
00:07:45,199 --> 00:07:47,674
but that is can get really difficult

143
00:07:47,674 --> 00:07:51,337
for repeatability in your CI
CD pipeline, so be careful about that.

144
00:07:53,416 --> 00:07:53,911
Okay,

145
00:07:53,911 --> 00:07:57,640
now I can also update a service,
which is really, really cool

146
00:07:58,003 --> 00:08:01,468
that I can update a running service
and I can do that.

147
00:08:01,468 --> 00:08:04,471
I can even update the image
that it's, using.

148
00:08:04,570 --> 00:08:06,616
I can do delays.

149
00:08:06,616 --> 00:08:08,431
I can say update.

150
00:08:08,431 --> 00:08:12,655
How many of the replicas
am I going to update concurrently?

151
00:08:13,348 --> 00:08:16,351
If we already have a started service
like we did for web,

152
00:08:16,483 --> 00:08:20,740
where I had three replicas,
I could do update parallelism at three,

153
00:08:20,740 --> 00:08:22,984
but then I'm going to lose
some of my reliability

154
00:08:22,984 --> 00:08:27,307
on that nginx web server,
so it's best to do it one at a time.

155
00:08:27,835 --> 00:08:31,696
What's going to happen
is as one of those tasks

156
00:08:31,696 --> 00:08:33,247
that are running under the service,

157
00:08:33,247 --> 00:08:36,382
which is one of those replicas
of the container,

158
00:08:37,240 --> 00:08:41,530
as it updates as soon as it's back up
into a running state,

159
00:08:41,530 --> 00:08:45,754
then it'll go and do the next one
and next one, and the traffic coming in

160
00:08:46,084 --> 00:08:49,351
will be hitting the service,
which is a gateway,

161
00:08:50,242 --> 00:08:53,245
and it's a round robin of load balancer.

162
00:08:53,311 --> 00:08:56,116
It it will round

163
00:08:56,116 --> 00:08:59,152
robin the requests through those services
as they're,

164
00:08:59,152 --> 00:09:02,155
as they're in the proper states,
which is really cool.

165
00:09:02,419 --> 00:09:02,617
All right.

166
00:09:02,617 --> 00:09:05,686
So I can update running, services.

167
00:09:05,917 --> 00:09:06,412
This way.

168
00:09:08,590 --> 00:09:08,920
Okay.

169
00:09:08,920 --> 00:09:12,352
I can also look and see what's going on
with certain services

170
00:09:12,715 --> 00:09:16,411
and the tasks that have run and are
currently running with the command.

171
00:09:16,411 --> 00:09:22,021
So Docker service PS and then web,
that will give me all the processes

172
00:09:22,021 --> 00:09:26,476
that have run on, on web across
all the machines that it's running on.

173
00:09:27,202 --> 00:09:30,172
Which is very different than Docker PS.

174
00:09:30,172 --> 00:09:33,736
Docker PS will only show me the containers

175
00:09:33,736 --> 00:09:36,937
that are running on the current host
docker service.

176
00:09:36,937 --> 00:09:41,227
PS and then the
the service name will show me

177
00:09:41,557 --> 00:09:44,263
all of the, tasks

178
00:09:44,263 --> 00:09:47,266
that are running for that service
across the swarm,

179
00:09:48,388 --> 00:09:49,840
which is super cool.

180
00:09:49,840 --> 00:09:54,757
I can also change the scale of my web
by giving just a scale command,

181
00:09:54,757 --> 00:09:58,321
and I can say, hey, I need to scale this
service up to five replicas.

182
00:09:58,948 --> 00:10:03,733
Service scale the web,
which is the, can service name.

183
00:10:03,997 --> 00:10:04,954
And then I say, hey,

184
00:10:04,954 --> 00:10:08,881
equal to five and boom, all of a sudden
I have five replicas running. Now,

185
00:10:10,036 --> 00:10:11,158
which is super cool.

186
00:10:11,158 --> 00:10:14,029
That's all from the command line.

187
00:10:14,029 --> 00:10:16,207
All right, so that's individual services.

188
00:10:16,207 --> 00:10:17,527
Let's talk about stacks.

189
00:10:17,527 --> 00:10:20,629
Remember
a stack is a collection of services

190
00:10:20,629 --> 00:10:23,698
that are running together
probably on the same set of networks.

191
00:10:23,995 --> 00:10:25,381
And most of the time,

192
00:10:25,381 --> 00:10:30,001
you have them on the same network,
but you can even segment inside a stack.

193
00:10:30,001 --> 00:10:31,519
Multiple networks,

194
00:10:31,519 --> 00:10:34,522
and you can have bridges
between the networks and all that stuff.

195
00:10:34,786 --> 00:10:37,789
But the idea of a stack is it's one,

196
00:10:39,142 --> 00:10:41,716
package, a collection of services
that I can control

197
00:10:41,716 --> 00:10:46,666
and manage from one point,
using Docker stack commands.

198
00:10:48,349 --> 00:10:51,484
So the first thing I want to do
is create a Docker compose file.

199
00:10:51,484 --> 00:10:55,015
In this case here
I only have one service called app.

200
00:10:55,477 --> 00:10:59,206
But that's okay
I, I the key elements are here.

201
00:10:59,404 --> 00:11:00,888
I can have multiple services.

202
00:11:00,888 --> 00:11:03,891
I can have app and web and database.

203
00:11:03,990 --> 00:11:06,465
I can specify how many replicas they have.

204
00:11:06,465 --> 00:11:11,316
I can specify the update
configs, the ports that I need publish to,

205
00:11:11,514 --> 00:11:15,606
and then even networks in this case
here of this Docker compose file.

206
00:11:15,606 --> 00:11:16,860
And there's lots of examples,

207
00:11:17,982 --> 00:11:19,368
that are available out there.

208
00:11:19,368 --> 00:11:22,602
So you can see how a lot of these are run
in this example

209
00:11:22,668 --> 00:11:25,836
here I have an overlay network
which if you remember

210
00:11:25,836 --> 00:11:28,806
that's a a VCs.

211
00:11:29,532 --> 00:11:33,228
So it is creating a subnet out there

212
00:11:33,393 --> 00:11:36,396
that all of the

213
00:11:36,495 --> 00:11:40,455
services that are on the same network,
the ASP.Net network.

214
00:11:40,455 --> 00:11:42,831
And in this case there's just one.

215
00:11:42,831 --> 00:11:46,758
But if I had, you know, multiple services
defined in my Docker compose,

216
00:11:47,517 --> 00:11:49,860
then they would
all connect to that network

217
00:11:49,860 --> 00:11:54,117
and they could all access each other
through the service name,

218
00:11:54,447 --> 00:11:56,031
which is that gateway.

219
00:11:56,031 --> 00:11:59,001
So you don't access individual replicas.

220
00:11:59,001 --> 00:12:02,334
Instead you access the service
through its name.

221
00:12:02,730 --> 00:12:06,426
You can also set up, aliases to,

222
00:12:07,053 --> 00:12:09,990
those services as well,
which is actually pretty slick.

223
00:12:09,990 --> 00:12:12,036
I can set up different, aliases.

224
00:12:13,686 --> 00:12:14,346
Okay.

225
00:12:14,346 --> 00:12:17,316
If I want to deploy this stack,
it's really simple.

226
00:12:17,745 --> 00:12:21,639
Docker
stack, deploy pass in the compose file

227
00:12:21,639 --> 00:12:23,025
and then name your stack.

228
00:12:23,025 --> 00:12:25,434
In this case I named it my stack.

229
00:12:25,434 --> 00:12:28,140
And I'm using that docker compose file
that I just showed you.

230
00:12:28,140 --> 00:12:31,638
So when I do this when I say docker stack
deploy

231
00:12:31,803 --> 00:12:37,314
it's going to run a docker
run or Docker service create for each

232
00:12:37,314 --> 00:12:42,396
one of those services, which in turn
runs a docker run on the back end.

233
00:12:42,594 --> 00:12:45,729
With everything configured,
all the networks set up properly.

234
00:12:46,752 --> 00:12:50,745
If I have volumes defined in the service,
it will define.

235
00:12:50,745 --> 00:12:54,507
It will create those volumes and attach
all those replicas

236
00:12:54,507 --> 00:12:57,510
to those, to that volume
that it established.

237
00:12:57,543 --> 00:12:58,236
Super cool.

238
00:12:58,236 --> 00:13:00,084
It handles a lot of the hard work for you

239
00:13:00,084 --> 00:13:03,087
when you're thinking
about multiple containers

240
00:13:03,252 --> 00:13:04,836
that are talking to each other,

241
00:13:04,836 --> 00:13:06,684
our services
that are talking to each other,

242
00:13:06,684 --> 00:13:09,687
and all the different replicas
that are running in those services,

243
00:13:09,720 --> 00:13:13,119
it handles all the management for you,
which is really, really nice.

244
00:13:14,967 --> 00:13:17,112
Okay, I can manage the stack as well.

245
00:13:17,112 --> 00:13:19,653
I can list all the stacks again.

246
00:13:19,653 --> 00:13:21,996
Docker stack ls for list.

247
00:13:21,996 --> 00:13:25,956
I can, look at all of my services
running in my stack

248
00:13:26,187 --> 00:13:29,586
by saying Docker stack services,
and then the stack name.

249
00:13:29,784 --> 00:13:35,130
I can look at all of the containers
that are running in my stack

250
00:13:35,130 --> 00:13:40,146
by doing a stack and the stack name,
and then I can blow away the stack,

251
00:13:40,509 --> 00:13:44,172
by doing a remove,
this will shut down all the containers

252
00:13:45,030 --> 00:13:47,967
and clean up, the networks and volumes.

253
00:13:47,967 --> 00:13:52,257
Anything else that it created for
that stack was really nice and simple.

254
00:13:53,841 --> 00:13:55,722
Remember I mentioned before

255
00:13:55,722 --> 00:13:58,494
Docker, their philosophy is,

256
00:13:58,494 --> 00:14:02,157
one button install, one button use,
and they've done it.

257
00:14:02,190 --> 00:14:03,972
They've done a great job with this. Here.

258
00:14:03,972 --> 00:14:05,556
Let's talk about the networking
a little bit.

259
00:14:05,556 --> 00:14:07,767
I inferred it a little bit.

260
00:14:07,767 --> 00:14:09,813
There's that overlay network.

261
00:14:09,813 --> 00:14:12,288
Now if I were to do it by hand,

262
00:14:13,476 --> 00:14:14,499
from the command line I would

263
00:14:14,499 --> 00:14:18,426
do docker network create D for

264
00:14:18,426 --> 00:14:22,023
and then overlay network
and then I gave it.

265
00:14:22,320 --> 00:14:25,158
Net or I can use the

266
00:14:25,158 --> 00:14:26,610
do it in Docker compose.

267
00:14:26,610 --> 00:14:30,603
Have you as you saw in the earlier
example, if I want to attach a service

268
00:14:30,603 --> 00:14:34,860
to a network, I use the dash dash
network flag in this case it would be app.

269
00:14:34,860 --> 00:14:37,863
Net is what I'm attaching to right

270
00:14:38,160 --> 00:14:41,163
by and attaching to networks.

271
00:14:41,526 --> 00:14:45,486
In other stacks is available as well
because you create this app.

272
00:14:45,486 --> 00:14:48,456
Net network
and you say, hey, this is attachable.

273
00:14:48,753 --> 00:14:52,416
So it will create in in a namespace
that you can attach to

274
00:14:52,416 --> 00:14:55,485
so that allows you to attach
different stacks together.

275
00:14:56,211 --> 00:14:57,696
So that they can communicate.

276
00:14:57,696 --> 00:15:01,458
Now here's here's the killer about this
though they may be on the same subnet

277
00:15:02,646 --> 00:15:05,682
and the
same network, but you need to make sure

278
00:15:05,682 --> 00:15:10,335
that you're going through the proper,
gateways, to get all that stuff done.

279
00:15:10,335 --> 00:15:13,602
So if you have multiple networks,
set them up appropriately.

280
00:15:13,833 --> 00:15:17,100
Make sure that all your services
that you need to talk to each other

281
00:15:17,100 --> 00:15:18,618
on the same network,

282
00:15:18,618 --> 00:15:21,621
I've seen time and time again
where people have forgotten

283
00:15:22,050 --> 00:15:26,505
to add a certain service onto a network,
and they were trying to connect it

284
00:15:26,505 --> 00:15:30,696
from another stack, and they didn't
have the service that they were trying to,

285
00:15:31,125 --> 00:15:32,676
directly connect to there.

286
00:15:32,676 --> 00:15:35,217
So that can be problematic sometimes.

287
00:15:35,217 --> 00:15:38,814
Also, we've got ingress, into the stack,

288
00:15:39,111 --> 00:15:42,114
and this can happen through,

289
00:15:42,378 --> 00:15:44,919
an entry point where the stack is running.

290
00:15:44,919 --> 00:15:47,988
And remember,
that typically has to be a manager node,

291
00:15:48,912 --> 00:15:52,740
but not necessarily has to be not
necessarily is a manager node.

292
00:15:53,037 --> 00:15:54,852
If I'm trying to access from the outside.

293
00:15:58,614 --> 00:15:59,043
Okay.

294
00:15:59,043 --> 00:16:00,132
Configs and secrets.

295
00:16:00,132 --> 00:16:03,135
Another really important aspect of swarms.

296
00:16:03,696 --> 00:16:07,029
Because you do have these tokens
and certifications that,

297
00:16:07,755 --> 00:16:10,296
you want to make sure
that your services have

298
00:16:10,296 --> 00:16:12,078
and that they can share with each other.

299
00:16:12,078 --> 00:16:14,883
So in order to do that,
the best thing to do is to create a secret

300
00:16:14,883 --> 00:16:19,404
and attach that those secrets to a service
or a stack.

301
00:16:20,031 --> 00:16:20,460
Right.

302
00:16:20,460 --> 00:16:24,387
And you can reference those in compose,
or you can use a configuration file.

303
00:16:24,816 --> 00:16:27,720
So in this case maybe I've got a password.

304
00:16:27,720 --> 00:16:31,580
I'm going to create the password
into a secret vault.

305
00:16:31,844 --> 00:16:35,639
In this case my DB password is going into

306
00:16:35,804 --> 00:16:38,708
my create,
my secret vault that I have here.

307
00:16:38,708 --> 00:16:40,952
So I'm creating a DB password.

308
00:16:40,952 --> 00:16:43,031
In this case, it's called DB password.

309
00:16:43,031 --> 00:16:43,988
Surprise, surprise.

310
00:16:45,275 --> 00:16:46,859
Okay, now, if I want

311
00:16:46,859 --> 00:16:50,291
to use those secrets in my docker compose,

312
00:16:50,687 --> 00:16:54,185
I can specify secrets,
and I can specify which secret

313
00:16:54,185 --> 00:16:58,673
I'm I'm using for passwords or whatever
the case may be.

314
00:16:58,838 --> 00:17:01,907
So you can see here
I've declared which secret I'm using.

315
00:17:02,138 --> 00:17:05,141
I'm saying that it's external
because it's an external,

316
00:17:05,405 --> 00:17:08,375
secret vault,
not just contained inside the stack.

317
00:17:08,375 --> 00:17:11,345
And I'm actually using it
in the DB service here.

318
00:17:13,655 --> 00:17:14,216
Okay.

319
00:17:14,216 --> 00:17:19,232
I can also, create a config
where I've got different configurations

320
00:17:19,232 --> 00:17:22,961
that I'm using, and then I can pass
into these stacks as well.

321
00:17:24,842 --> 00:17:25,172
Okay.

322
00:17:25,172 --> 00:17:28,175
Another really interesting thing
that you should do for Docker Swarm

323
00:17:28,175 --> 00:17:31,277
if you need high availability
and fault tolerance.

324
00:17:32,069 --> 00:17:34,775
The managers that I have running in swarm,

325
00:17:34,775 --> 00:17:37,844
if you just have one manager
and that no goes down, you're dead.

326
00:17:37,877 --> 00:17:38,867
You're toast.

327
00:17:39,956 --> 00:17:40,253
Right.

328
00:17:40,253 --> 00:17:43,388
Because the manager's the one that's
coordinating and orchestrating everything.

329
00:17:43,883 --> 00:17:47,018
So it's best to run these
if you need high availability

330
00:17:47,018 --> 00:17:51,044
in, 3 or 5 to form a quorum.

331
00:17:51,737 --> 00:17:54,971
Odd numbers are the best way
because it uses raft consensus to do this.

332
00:17:55,433 --> 00:17:57,215
Make sure you have enough worker nodes.

333
00:17:57,215 --> 00:18:00,152
Your manager nodes
can act as worker nodes as well.

334
00:18:00,152 --> 00:18:03,221
If you have a small configuration,
maybe you only have five nodes.

335
00:18:03,485 --> 00:18:06,488
You want to use those worker
nodes, as well.

336
00:18:06,719 --> 00:18:08,600
Or you want to use those manage
your nodes as well.

337
00:18:08,600 --> 00:18:12,329
It's kind of lame to have three manager
nodes and two worker nodes.

338
00:18:13,055 --> 00:18:15,464
In fact, by default

339
00:18:15,464 --> 00:18:18,038
you guessed it, Docker Swarm uses

340
00:18:18,038 --> 00:18:21,074
the manager nodes by default,
which is really kind of nice.

341
00:18:22,031 --> 00:18:25,496
Also realize that,
your deployment strategies

342
00:18:25,496 --> 00:18:29,390
that you have make sure that you're
automatically well, and by default

343
00:18:29,390 --> 00:18:33,317
it automatically keeps trying to run
failed task over and over again

344
00:18:33,977 --> 00:18:36,287
on different nodes.
It'll rotate it through.

345
00:18:36,287 --> 00:18:38,201
Now this is really interesting

346
00:18:38,201 --> 00:18:41,402
and you need to watch for this
when you're debugging a stack.

347
00:18:41,402 --> 00:18:42,557
If you've got a,

348
00:18:43,646 --> 00:18:46,517
image that is not properly configured

349
00:18:46,517 --> 00:18:49,850
or something like that and tries
to start a container and it fails,

350
00:18:50,972 --> 00:18:53,810
it'll keep failing
over and over and over again,

351
00:18:53,810 --> 00:18:56,318
and you'll be sitting there going,
I wonder what's going on.

352
00:18:56,318 --> 00:18:58,529
It's not working.

353
00:18:58,529 --> 00:19:01,202
Well, take a look at your logs to,

354
00:19:01,202 --> 00:19:04,139
do a stack, logs.

355
00:19:04,139 --> 00:19:07,076
And you can look at your logs
across all the services.

356
00:19:07,076 --> 00:19:10,211
Or you can pick one service specifically
and look at its logs.

357
00:19:10,673 --> 00:19:13,115
It'll give you the logs
of all the tasks that have run,

358
00:19:13,115 --> 00:19:14,864
which can be very beneficial.

359
00:19:14,864 --> 00:19:17,867
You can see what's going on.

360
00:19:19,715 --> 00:19:20,078
Okay.

361
00:19:20,078 --> 00:19:25,226
Best practices I already mentioned some of
this three manager nodes for resiliency.

362
00:19:25,490 --> 00:19:26,612
Label your nodes.

363
00:19:26,612 --> 00:19:29,615
Because if you have a special node
let's say it's

364
00:19:29,615 --> 00:19:33,278
a high end server,
that you're using for database.

365
00:19:33,278 --> 00:19:36,809
And you want to make sure
that your containers always land on that

366
00:19:36,809 --> 00:19:39,845
cluster of, database, servers.

367
00:19:40,142 --> 00:19:43,871
You can actually,
when you, configure a node

368
00:19:43,871 --> 00:19:47,600
or you can update a node,
by giving it a role.

369
00:19:47,600 --> 00:19:51,329
And, that's, that could be beneficial
because now you can target that

370
00:19:51,329 --> 00:19:55,586
in your Docker compose saying, hey,
I need this to run on this kind of node.

371
00:19:56,147 --> 00:19:58,655
Which could be, very, very useful.

372
00:19:58,655 --> 00:20:01,955
Also, use some health checks
in your compose to enable

373
00:20:01,955 --> 00:20:03,935
starting and rescheduling.

374
00:20:03,935 --> 00:20:07,202
Take a look at, at health
checks in the Docker compose,

375
00:20:08,060 --> 00:20:11,129
configuration guides and documentation

376
00:20:11,855 --> 00:20:14,990
also limit the service update parallelism.

377
00:20:15,518 --> 00:20:19,940
If you update the whole thing,
you can get a, degradation in service

378
00:20:20,303 --> 00:20:21,425
while you're doing an update.

379
00:20:21,425 --> 00:20:25,979
If you if you or you get total downtime
while it's updating everything.

380
00:20:27,233 --> 00:20:30,533
In some cases you want to do that because
you don't want anything new coming in.

381
00:20:30,764 --> 00:20:32,810
In other cases, you want to do rolling.

382
00:20:32,810 --> 00:20:37,265
Use that parallelism to help you do that,
and then rotate your secrets

383
00:20:37,496 --> 00:20:40,697
via, version secret updates and service
updates.

384
00:20:41,225 --> 00:20:42,875
Right.

385
00:20:42,875 --> 00:20:45,086
It's great
that you've got secrets and tokens,

386
00:20:45,086 --> 00:20:46,505
but if you're not rotating them,

387
00:20:46,505 --> 00:20:48,815
someone could be in there
and you wouldn't even know it.

388
00:20:48,815 --> 00:20:51,785
So, watch out for that.

389
00:20:52,610 --> 00:20:54,095
All right, as I already mentioned

390
00:20:54,095 --> 00:20:57,065
before, Docker Swarm, it goes towards,

391
00:20:59,045 --> 00:21:00,893
opinionated over

392
00:21:00,893 --> 00:21:03,863
or convention over configurability.

393
00:21:03,863 --> 00:21:07,031
And because of that, it's easy
to set up and easy to use.

394
00:21:07,328 --> 00:21:11,453
It really is ideal for small, medium
deployments if I'm doing a massive

395
00:21:11,453 --> 00:21:15,050
deployment across hundreds of nodes,
probably not what you want to go with.

396
00:21:15,314 --> 00:21:17,228
You want to go with something
more like Kubernetes,

397
00:21:17,228 --> 00:21:20,231
but realize that Kubernetes
is more complex.

398
00:21:20,462 --> 00:21:23,465
And, most of the time your Docker

399
00:21:24,092 --> 00:21:27,821
compose can run on Kubernetes
as well as Docker Swarm.

400
00:21:27,821 --> 00:21:30,758
So if you're a developer,
I always stick with Docker Swarm.

401
00:21:30,758 --> 00:21:35,147
It's much easier to manage and handle,
and then I can deploy those Docker

402
00:21:35,147 --> 00:21:38,216
compose files out to, Kubernetes cluster.

403
00:21:38,216 --> 00:21:39,107
Pretty straightforward.
